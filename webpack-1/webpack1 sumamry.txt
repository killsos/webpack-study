BINDING LOADERS
We don’t want to write such long requires require("!style!css!./style.css");.

We can bind file extensions to loaders so we just need to write: require("./style.css")

require("./style.css");
document.write(require("./content.js"));


run: webpack ./entry.js bundle.js --module-bind 'css=style!css'

---------------
A CONFIG FILE
add a file : webpack.config.js

module.exports = {
    entry: "./entry.js",
    output: {
        path: __dirname,
        filename: "bundle.js"
    },
    module: {
        loaders: [
            { test: /\.css$/, loader: "style!css" }
        ]
    }
};

The webpack command-line will try to load the file webpack.config.js in the current directory.
---------------
A PRETTIER OUTPUT:
If the project grows the compilation may take a bit longer.
So we want to display some kind of progress bar.
And we want color,
We can achieve this with
webpack --progress --colors

WATCH MODE:
We don’t want to manually recompile after every change
webpack --progress --colors --watch


DEVELOPMENT SERVER:
npm install webpack-dev-server -g

webpack-dev-server --progress --colors
---------------

$ webpack --config webpack.min.js //另一份配置文件

$ webpack --display-error-details //显示异常信息

$ webpack --watch   //监听变动并自动打包

$ webpack -p    //压缩混淆脚本，这个非常非常重要！

$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了

webpack-dev-server
webpack-dev-server是一个小型的node.js Express服务器,它使用webpack-dev-middleware中间件来为通过webpack打包生成的资源文件提供Web服务。它还有一个通过Socket.IO连接着webpack-dev-server服务器的小型运行时程序。webpack-dev-server发送关于编译状态的消息到客户端，客户端根据消息作出响应。

webpack-dev-server有两种模式支持自动刷新——iframe模式和inline模式

在iframe模式下：页面是嵌套在一个iframe下的，在代码发生改动的时候，这个iframe会重新加载
在inline模式下：一个小型的webpack-dev-server客户端会作为入口文件打包，这个客户端会在后端代码改变的时候刷新页面
使用iframe模式，无需额外配置，只需在浏览器输入

http://localhost:8080/webpack-dev-server/index.html
使用inline模式有两种方式：命令行和nodejs API

命令行： 在运行时，加上 --inline 选项

$ webpack-dev-server --inline
访问，通过http://localhost:8080 就可以访问

nodejs API 方式 ，需要手动把 webpack-dev-server/client?http://localhost:8080 加到配置文件的入口文件处

webpac-dev-server支持Hot Module Replacement，即模块热替换，在前端代码变动的时候无需整个刷新页面，只把变化的部分替换掉
